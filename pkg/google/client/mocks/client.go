// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/google/client/client.go
//
// Generated by this command:
//
//	mockgen -source=pkg/google/client/client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	billingpb "cloud.google.com/go/billing/apiv1/billingpb"
	client "github.com/grafana/cloudcost-exporter/pkg/google/client"
	metrics "github.com/grafana/cloudcost-exporter/pkg/google/metrics"
	gomock "go.uber.org/mock/gomock"
	compute "google.golang.org/api/compute/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ExportBucketInfo mocks base method.
func (m_2 *MockClient) ExportBucketInfo(ctx context.Context, projects []string, m *metrics.Metrics) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ExportBucketInfo", ctx, projects, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportBucketInfo indicates an expected call of ExportBucketInfo.
func (mr *MockClientMockRecorder) ExportBucketInfo(ctx, projects, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportBucketInfo", reflect.TypeOf((*MockClient)(nil).ExportBucketInfo), ctx, projects, m)
}

// ExportGCPCostData mocks base method.
func (m_2 *MockClient) ExportGCPCostData(ctx context.Context, serviceName string, m *metrics.Metrics) float64 {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ExportGCPCostData", ctx, serviceName, m)
	ret0, _ := ret[0].(float64)
	return ret0
}

// ExportGCPCostData indicates an expected call of ExportGCPCostData.
func (mr *MockClientMockRecorder) ExportGCPCostData(ctx, serviceName, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportGCPCostData", reflect.TypeOf((*MockClient)(nil).ExportGCPCostData), ctx, serviceName, m)
}

// ExportRegionalDiscounts mocks base method.
func (m_2 *MockClient) ExportRegionalDiscounts(ctx context.Context, m *metrics.Metrics) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ExportRegionalDiscounts", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExportRegionalDiscounts indicates an expected call of ExportRegionalDiscounts.
func (mr *MockClientMockRecorder) ExportRegionalDiscounts(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRegionalDiscounts", reflect.TypeOf((*MockClient)(nil).ExportRegionalDiscounts), ctx, m)
}

// GetPricing mocks base method.
func (m *MockClient) GetPricing(ctx context.Context, serviceName string) []*billingpb.Sku {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPricing", ctx, serviceName)
	ret0, _ := ret[0].([]*billingpb.Sku)
	return ret0
}

// GetPricing indicates an expected call of GetPricing.
func (mr *MockClientMockRecorder) GetPricing(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPricing", reflect.TypeOf((*MockClient)(nil).GetPricing), ctx, serviceName)
}

// GetRegions mocks base method.
func (m *MockClient) GetRegions(project string) ([]*compute.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", project)
	ret0, _ := ret[0].([]*compute.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockClientMockRecorder) GetRegions(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockClient)(nil).GetRegions), project)
}

// GetServiceName mocks base method.
func (m *MockClient) GetServiceName(ctx context.Context, serviceName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceName", ctx, serviceName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceName indicates an expected call of GetServiceName.
func (mr *MockClientMockRecorder) GetServiceName(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceName", reflect.TypeOf((*MockClient)(nil).GetServiceName), ctx, serviceName)
}

// GetZones mocks base method.
func (m *MockClient) GetZones(project string) ([]*compute.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", project)
	ret0, _ := ret[0].([]*compute.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockClientMockRecorder) GetZones(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockClient)(nil).GetZones), project)
}

// ListDisks mocks base method.
func (m *MockClient) ListDisks(ctx context.Context, project, zone string) ([]*compute.Disk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisks", ctx, project, zone)
	ret0, _ := ret[0].([]*compute.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisks indicates an expected call of ListDisks.
func (mr *MockClientMockRecorder) ListDisks(ctx, project, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisks", reflect.TypeOf((*MockClient)(nil).ListDisks), ctx, project, zone)
}

// ListForwardingRules mocks base method.
func (m *MockClient) ListForwardingRules(ctx context.Context, project, region string) ([]*compute.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForwardingRules", ctx, project, region)
	ret0, _ := ret[0].([]*compute.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForwardingRules indicates an expected call of ListForwardingRules.
func (mr *MockClientMockRecorder) ListForwardingRules(ctx, project, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForwardingRules", reflect.TypeOf((*MockClient)(nil).ListForwardingRules), ctx, project, region)
}

// ListInstancesInZone mocks base method.
func (m *MockClient) ListInstancesInZone(projectId, zone string) ([]*client.MachineSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancesInZone", projectId, zone)
	ret0, _ := ret[0].([]*client.MachineSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancesInZone indicates an expected call of ListInstancesInZone.
func (mr *MockClientMockRecorder) ListInstancesInZone(projectId, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancesInZone", reflect.TypeOf((*MockClient)(nil).ListInstancesInZone), projectId, zone)
}
