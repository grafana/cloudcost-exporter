// Code generated by MockGen. DO NOT EDIT.
// Source: bucket.go
//
// Generated by this command:
//
//	mockgen -source=bucket.go -destination mocks/bucket.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	storage "cloud.google.com/go/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageClientInterface is a mock of StorageClientInterface interface.
type MockStorageClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientInterfaceMockRecorder
	isgomock struct{}
}

// MockStorageClientInterfaceMockRecorder is the mock recorder for MockStorageClientInterface.
type MockStorageClientInterfaceMockRecorder struct {
	mock *MockStorageClientInterface
}

// NewMockStorageClientInterface creates a new mock instance.
func NewMockStorageClientInterface(ctrl *gomock.Controller) *MockStorageClientInterface {
	mock := &MockStorageClientInterface{ctrl: ctrl}
	mock.recorder = &MockStorageClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClientInterface) EXPECT() *MockStorageClientInterfaceMockRecorder {
	return m.recorder
}

// Buckets mocks base method.
func (m *MockStorageClientInterface) Buckets(ctx context.Context, projectID string) *storage.BucketIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buckets", ctx, projectID)
	ret0, _ := ret[0].(*storage.BucketIterator)
	return ret0
}

// Buckets indicates an expected call of Buckets.
func (mr *MockStorageClientInterfaceMockRecorder) Buckets(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buckets", reflect.TypeOf((*MockStorageClientInterface)(nil).Buckets), ctx, projectID)
}
