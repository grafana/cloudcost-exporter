// Code generated by MockGen. DO NOT EDIT.
// Source: region.go
//
// Generated by this command:
//
//	mockgen -source=region.go -destination mocks/region.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	compute "cloud.google.com/go/compute/apiv1"
	computepb "cloud.google.com/go/compute/apiv1/computepb"
	gax "github.com/googleapis/gax-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockRegionsClient is a mock of RegionsClient interface.
type MockRegionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegionsClientMockRecorder
	isgomock struct{}
}

// MockRegionsClientMockRecorder is the mock recorder for MockRegionsClient.
type MockRegionsClientMockRecorder struct {
	mock *MockRegionsClient
}

// NewMockRegionsClient creates a new mock instance.
func NewMockRegionsClient(ctrl *gomock.Controller) *MockRegionsClient {
	mock := &MockRegionsClient{ctrl: ctrl}
	mock.recorder = &MockRegionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegionsClient) EXPECT() *MockRegionsClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRegionsClient) List(ctx context.Context, req *computepb.ListRegionsRequest, opts ...gax.CallOption) *compute.RegionIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*compute.RegionIterator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockRegionsClientMockRecorder) List(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegionsClient)(nil).List), varargs...)
}
