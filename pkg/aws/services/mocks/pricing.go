// Code generated by MockGen. DO NOT EDIT.
// Source: pricing.go
//
// Generated by this command:
//
//	mockgen -source=pricing.go -destination ../mocks/pricing.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pricing "github.com/aws/aws-sdk-go-v2/service/pricing"
	gomock "go.uber.org/mock/gomock"
)

// MockPricing is a mock of Pricing interface.
type MockPricing struct {
	ctrl     *gomock.Controller
	recorder *MockPricingMockRecorder
	isgomock struct{}
}

// MockPricingMockRecorder is the mock recorder for MockPricing.
type MockPricingMockRecorder struct {
	mock *MockPricing
}

// NewMockPricing creates a new mock instance.
func NewMockPricing(ctrl *gomock.Controller) *MockPricing {
	mock := &MockPricing{ctrl: ctrl}
	mock.recorder = &MockPricingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPricing) EXPECT() *MockPricingMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockPricing) GetProducts(ctx context.Context, params *pricing.GetProductsInput, optFns ...func(*pricing.Options)) (*pricing.GetProductsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProducts", varargs...)
	ret0, _ := ret[0].(*pricing.GetProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockPricingMockRecorder) GetProducts(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockPricing)(nil).GetProducts), varargs...)
}
