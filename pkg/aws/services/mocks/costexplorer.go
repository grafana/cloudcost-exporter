// Code generated by MockGen. DO NOT EDIT.
// Source: costexplorer.go
//
// Generated by this command:
//
//	mockgen -source=costexplorer.go -destination ../mocks/costexplorer.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	costexplorer "github.com/aws/aws-sdk-go-v2/service/costexplorer"
	gomock "go.uber.org/mock/gomock"
)

// MockCostExplorer is a mock of CostExplorer interface.
type MockCostExplorer struct {
	ctrl     *gomock.Controller
	recorder *MockCostExplorerMockRecorder
	isgomock struct{}
}

// MockCostExplorerMockRecorder is the mock recorder for MockCostExplorer.
type MockCostExplorerMockRecorder struct {
	mock *MockCostExplorer
}

// NewMockCostExplorer creates a new mock instance.
func NewMockCostExplorer(ctrl *gomock.Controller) *MockCostExplorer {
	mock := &MockCostExplorer{ctrl: ctrl}
	mock.recorder = &MockCostExplorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCostExplorer) EXPECT() *MockCostExplorerMockRecorder {
	return m.recorder
}

// GetCostAndUsage mocks base method.
func (m *MockCostExplorer) GetCostAndUsage(ctx context.Context, params *costexplorer.GetCostAndUsageInput, optFns ...func(*costexplorer.Options)) (*costexplorer.GetCostAndUsageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCostAndUsage", varargs...)
	ret0, _ := ret[0].(*costexplorer.GetCostAndUsageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostAndUsage indicates an expected call of GetCostAndUsage.
func (mr *MockCostExplorerMockRecorder) GetCostAndUsage(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostAndUsage", reflect.TypeOf((*MockCostExplorer)(nil).GetCostAndUsage), varargs...)
}
