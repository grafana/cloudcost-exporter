// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination mocks/client.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	types0 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2/types"
	rdsTypes "github.com/aws/aws-sdk-go-v2/service/rds/types"
	client "github.com/grafana/cloudcost-exporter/pkg/aws/client"
	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DescribeLoadBalancers mocks base method.
func (m *MockClient) DescribeLoadBalancers(ctx context.Context) ([]types0.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", ctx)
	ret0, _ := ret[0].([]types0.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockClientMockRecorder) DescribeLoadBalancers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockClient)(nil).DescribeLoadBalancers), ctx)
}

// DescribeRegions mocks base method.
func (m *MockClient) DescribeRegions(ctx context.Context, allRegions bool) ([]types.Region, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegions", ctx, allRegions)
	ret0, _ := ret[0].([]types.Region)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegions indicates an expected call of DescribeRegions.
func (mr *MockClientMockRecorder) DescribeRegions(ctx, allRegions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegions", reflect.TypeOf((*MockClient)(nil).DescribeRegions), ctx, allRegions)
}

// GetBillingData mocks base method.
func (m *MockClient) GetBillingData(ctx context.Context, startDate, endDate time.Time) (*client.BillingData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingData", ctx, startDate, endDate)
	ret0, _ := ret[0].(*client.BillingData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingData indicates an expected call of GetBillingData.
func (mr *MockClientMockRecorder) GetBillingData(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingData", reflect.TypeOf((*MockClient)(nil).GetBillingData), ctx, startDate, endDate)
}

// ListComputeInstances mocks base method.
func (m *MockClient) ListComputeInstances(ctx context.Context) ([]types.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComputeInstances", ctx)
	ret0, _ := ret[0].([]types.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComputeInstances indicates an expected call of ListComputeInstances.
func (mr *MockClientMockRecorder) ListComputeInstances(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComputeInstances", reflect.TypeOf((*MockClient)(nil).ListComputeInstances), ctx)
}

// ListEBSVolumes mocks base method.
func (m *MockClient) ListEBSVolumes(ctx context.Context) ([]types.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEBSVolumes", ctx)
	ret0, _ := ret[0].([]types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEBSVolumes indicates an expected call of ListEBSVolumes.
func (mr *MockClientMockRecorder) ListEBSVolumes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEBSVolumes", reflect.TypeOf((*MockClient)(nil).ListEBSVolumes), ctx)
}

// ListEC2ServicePrices mocks base method.
func (m *MockClient) ListEC2ServicePrices(ctx context.Context, region string, filters []types1.Filter) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEC2ServicePrices", ctx, region, filters)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEC2ServicePrices indicates an expected call of ListEC2ServicePrices.
func (mr *MockClientMockRecorder) ListEC2ServicePrices(ctx, region, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEC2ServicePrices", reflect.TypeOf((*MockClient)(nil).ListEC2ServicePrices), ctx, region, filters)
}

// ListELBPrices mocks base method.
func (m *MockClient) ListELBPrices(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListELBPrices", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListELBPrices indicates an expected call of ListELBPrices.
func (mr *MockClientMockRecorder) ListELBPrices(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListELBPrices", reflect.TypeOf((*MockClient)(nil).ListELBPrices), ctx, region)
}

// ListOnDemandPrices mocks base method.
func (m *MockClient) ListOnDemandPrices(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOnDemandPrices", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOnDemandPrices indicates an expected call of ListOnDemandPrices.
func (mr *MockClientMockRecorder) ListOnDemandPrices(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOnDemandPrices", reflect.TypeOf((*MockClient)(nil).ListOnDemandPrices), ctx, region)
}

// ListSpotPrices mocks base method.
func (m *MockClient) ListSpotPrices(ctx context.Context) ([]types.SpotPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpotPrices", ctx)
	ret0, _ := ret[0].([]types.SpotPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpotPrices indicates an expected call of ListSpotPrices.
func (mr *MockClientMockRecorder) ListSpotPrices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpotPrices", reflect.TypeOf((*MockClient)(nil).ListSpotPrices), ctx)
}

// ListStoragePrices mocks base method.
func (m *MockClient) ListStoragePrices(ctx context.Context, region string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePrices", ctx, region)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePrices indicates an expected call of ListStoragePrices.
func (mr *MockClientMockRecorder) ListStoragePrices(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePrices", reflect.TypeOf((*MockClient)(nil).ListStoragePrices), ctx, region)
}

// Metrics mocks base method.
func (m *MockClient) Metrics() []prometheus.Collector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].([]prometheus.Collector)
	return ret0
}

// Metrics indicates an expected call of Metrics.
func (mr *MockClientMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockClient)(nil).Metrics))
}

// ListRDSInstances mocks base method.
func (m *MockClient) ListRDSInstances(ctx context.Context) ([]rdsTypes.DBInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRDSInstances", ctx)
	ret0, _ := ret[0].([]rdsTypes.DBInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRDSUnitData mocks base method.
func (m *MockClient) GetRDSUnitData(ctx context.Context, instType, region, deploymentOption, databaseEngine, locationType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRDSUnitPrice", ctx, instType, region, deploymentOption, databaseEngine, locationType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
