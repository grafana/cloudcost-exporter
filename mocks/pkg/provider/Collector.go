// Code generated by mockery v2.38.0. DO NOT EDIT.

package provider

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// Collector is an autogenerated mock type for the Collector type
type Collector struct {
	mock.Mock
}

type Collector_Expecter struct {
	mock *mock.Mock
}

func (_m *Collector) EXPECT() *Collector_Expecter {
	return &Collector_Expecter{mock: &_m.Mock}
}

// Collect provides a mock function with given fields:
func (_m *Collector) Collect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Collect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type Collector_Collect_Call struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
func (_e *Collector_Expecter) Collect() *Collector_Collect_Call {
	return &Collector_Collect_Call{Call: _e.mock.On("Collect")}
}

func (_c *Collector_Collect_Call) Run(run func()) *Collector_Collect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collector_Collect_Call) Return(_a0 error) *Collector_Collect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collector_Collect_Call) RunAndReturn(run func() error) *Collector_Collect_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Collector) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Collector_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Collector_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Collector_Expecter) Name() *Collector_Name_Call {
	return &Collector_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Collector_Name_Call) Run(run func()) *Collector_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collector_Name_Call) Return(_a0 string) *Collector_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collector_Name_Call) RunAndReturn(run func() string) *Collector_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0
func (_m *Collector) Register(_a0 *prometheus.Registry) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*prometheus.Registry) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Collector_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Collector_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 *prometheus.Registry
func (_e *Collector_Expecter) Register(_a0 interface{}) *Collector_Register_Call {
	return &Collector_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *Collector_Register_Call) Run(run func(_a0 *prometheus.Registry)) *Collector_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*prometheus.Registry))
	})
	return _c
}

func (_c *Collector_Register_Call) Return(_a0 error) *Collector_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Collector_Register_Call) RunAndReturn(run func(*prometheus.Registry) error) *Collector_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollector creates a new instance of Collector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collector {
	mock := &Collector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
