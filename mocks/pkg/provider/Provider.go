// Code generated by mockery v2.38.0. DO NOT EDIT.

package provider

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// CollectMetrics provides a mock function with given fields:
func (_m *Provider) CollectMetrics() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollectMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_CollectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectMetrics'
type Provider_CollectMetrics_Call struct {
	*mock.Call
}

// CollectMetrics is a helper method to define mock.On call
func (_e *Provider_Expecter) CollectMetrics() *Provider_CollectMetrics_Call {
	return &Provider_CollectMetrics_Call{Call: _e.mock.On("CollectMetrics")}
}

func (_c *Provider_CollectMetrics_Call) Run(run func()) *Provider_CollectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_CollectMetrics_Call) Return(_a0 error) *Provider_CollectMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_CollectMetrics_Call) RunAndReturn(run func() error) *Provider_CollectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCollectors provides a mock function with given fields: registry
func (_m *Provider) RegisterCollectors(registry *prometheus.Registry) error {
	ret := _m.Called(registry)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCollectors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*prometheus.Registry) error); ok {
		r0 = rf(registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_RegisterCollectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollectors'
type Provider_RegisterCollectors_Call struct {
	*mock.Call
}

// RegisterCollectors is a helper method to define mock.On call
//   - registry *prometheus.Registry
func (_e *Provider_Expecter) RegisterCollectors(registry interface{}) *Provider_RegisterCollectors_Call {
	return &Provider_RegisterCollectors_Call{Call: _e.mock.On("RegisterCollectors", registry)}
}

func (_c *Provider_RegisterCollectors_Call) Run(run func(registry *prometheus.Registry)) *Provider_RegisterCollectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*prometheus.Registry))
	})
	return _c
}

func (_c *Provider_RegisterCollectors_Call) Return(_a0 error) *Provider_RegisterCollectors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_RegisterCollectors_Call) RunAndReturn(run func(*prometheus.Registry) error) *Provider_RegisterCollectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
