// Code generated by mockery v2.38.0. DO NOT EDIT.

package gcs

import (
	billing "cloud.google.com/go/billing/apiv1"
	billingpb "cloud.google.com/go/billing/apiv1/billingpb"

	context "context"

	gax "github.com/googleapis/gax-go/v2"

	mock "github.com/stretchr/testify/mock"
)

// CloudCatalogClient is an autogenerated mock type for the CloudCatalogClient type
type CloudCatalogClient struct {
	mock.Mock
}

type CloudCatalogClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudCatalogClient) EXPECT() *CloudCatalogClient_Expecter {
	return &CloudCatalogClient_Expecter{mock: &_m.Mock}
}

// ListServices provides a mock function with given fields: ctx, req, opts
func (_m *CloudCatalogClient) ListServices(ctx context.Context, req *billingpb.ListServicesRequest, opts ...gax.CallOption) *billing.ServiceIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *billing.ServiceIterator
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListServicesRequest, ...gax.CallOption) *billing.ServiceIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ServiceIterator)
		}
	}

	return r0
}

// CloudCatalogClient_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type CloudCatalogClient_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billingpb.ListServicesRequest
//   - opts ...gax.CallOption
func (_e *CloudCatalogClient_Expecter) ListServices(ctx interface{}, req interface{}, opts ...interface{}) *CloudCatalogClient_ListServices_Call {
	return &CloudCatalogClient_ListServices_Call{Call: _e.mock.On("ListServices",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *CloudCatalogClient_ListServices_Call) Run(run func(ctx context.Context, req *billingpb.ListServicesRequest, opts ...gax.CallOption)) *CloudCatalogClient_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gax.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gax.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*billingpb.ListServicesRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudCatalogClient_ListServices_Call) Return(_a0 *billing.ServiceIterator) *CloudCatalogClient_ListServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudCatalogClient_ListServices_Call) RunAndReturn(run func(context.Context, *billingpb.ListServicesRequest, ...gax.CallOption) *billing.ServiceIterator) *CloudCatalogClient_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListSkus provides a mock function with given fields: ctx, req, opts
func (_m *CloudCatalogClient) ListSkus(ctx context.Context, req *billingpb.ListSkusRequest, opts ...gax.CallOption) *billing.SkuIterator {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkus")
	}

	var r0 *billing.SkuIterator
	if rf, ok := ret.Get(0).(func(context.Context, *billingpb.ListSkusRequest, ...gax.CallOption) *billing.SkuIterator); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.SkuIterator)
		}
	}

	return r0
}

// CloudCatalogClient_ListSkus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSkus'
type CloudCatalogClient_ListSkus_Call struct {
	*mock.Call
}

// ListSkus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billingpb.ListSkusRequest
//   - opts ...gax.CallOption
func (_e *CloudCatalogClient_Expecter) ListSkus(ctx interface{}, req interface{}, opts ...interface{}) *CloudCatalogClient_ListSkus_Call {
	return &CloudCatalogClient_ListSkus_Call{Call: _e.mock.On("ListSkus",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *CloudCatalogClient_ListSkus_Call) Run(run func(ctx context.Context, req *billingpb.ListSkusRequest, opts ...gax.CallOption)) *CloudCatalogClient_ListSkus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gax.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gax.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*billingpb.ListSkusRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudCatalogClient_ListSkus_Call) Return(_a0 *billing.SkuIterator) *CloudCatalogClient_ListSkus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CloudCatalogClient_ListSkus_Call) RunAndReturn(run func(context.Context, *billingpb.ListSkusRequest, ...gax.CallOption) *billing.SkuIterator) *CloudCatalogClient_ListSkus_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudCatalogClient creates a new instance of CloudCatalogClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudCatalogClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudCatalogClient {
	mock := &CloudCatalogClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
