// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/azure/azureClientWrapper/azureClientWrapper.go
//
// Generated by this command:
//
//	mockgen -source=pkg/azure/azureClientWrapper/azureClientWrapper.go -destination mocks/pkg/azure/azureClientWrapper/azureClientWrapper.go
//

// Package mock_azureClientWrapper is a generated GoMock package.
package mock_azureClientWrapper

import (
	context "context"
	reflect "reflect"

	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	armcontainerservice "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v5"
	gomock "go.uber.org/mock/gomock"
	sdk "gomodules.xyz/azure-retail-prices-sdk-for-go/sdk"
)

// MockAzureClient is a mock of AzureClient interface.
type MockAzureClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureClientMockRecorder
}

// MockAzureClientMockRecorder is the mock recorder for MockAzureClient.
type MockAzureClientMockRecorder struct {
	mock *MockAzureClient
}

// NewMockAzureClient creates a new mock instance.
func NewMockAzureClient(ctrl *gomock.Controller) *MockAzureClient {
	mock := &MockAzureClient{ctrl: ctrl}
	mock.recorder = &MockAzureClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureClient) EXPECT() *MockAzureClientMockRecorder {
	return m.recorder
}

// ListClustersInSubscription mocks base method.
func (m *MockAzureClient) ListClustersInSubscription(arg0 context.Context) ([]*armcontainerservice.ManagedCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersInSubscription", arg0)
	ret0, _ := ret[0].([]*armcontainerservice.ManagedCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersInSubscription indicates an expected call of ListClustersInSubscription.
func (mr *MockAzureClientMockRecorder) ListClustersInSubscription(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersInSubscription", reflect.TypeOf((*MockAzureClient)(nil).ListClustersInSubscription), arg0)
}

// ListMachineTypesByLocation mocks base method.
func (m *MockAzureClient) ListMachineTypesByLocation(arg0 context.Context, arg1 string) ([]*armcompute.VirtualMachineSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineTypesByLocation", arg0, arg1)
	ret0, _ := ret[0].([]*armcompute.VirtualMachineSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypesByLocation indicates an expected call of ListMachineTypesByLocation.
func (mr *MockAzureClientMockRecorder) ListMachineTypesByLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypesByLocation", reflect.TypeOf((*MockAzureClient)(nil).ListMachineTypesByLocation), arg0, arg1)
}

// ListPrices mocks base method.
func (m *MockAzureClient) ListPrices(arg0 context.Context, arg1 *sdk.RetailPricesClientListOptions) ([]*sdk.ResourceSKU, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrices", arg0, arg1)
	ret0, _ := ret[0].([]*sdk.ResourceSKU)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrices indicates an expected call of ListPrices.
func (mr *MockAzureClientMockRecorder) ListPrices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrices", reflect.TypeOf((*MockAzureClient)(nil).ListPrices), arg0, arg1)
}

// ListVirtualMachineScaleSetsFromResourceGroup mocks base method.
func (m *MockAzureClient) ListVirtualMachineScaleSetsFromResourceGroup(arg0 context.Context, arg1 string) ([]*armcompute.VirtualMachineScaleSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetsFromResourceGroup", arg0, arg1)
	ret0, _ := ret[0].([]*armcompute.VirtualMachineScaleSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetsFromResourceGroup indicates an expected call of ListVirtualMachineScaleSetsFromResourceGroup.
func (mr *MockAzureClientMockRecorder) ListVirtualMachineScaleSetsFromResourceGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetsFromResourceGroup", reflect.TypeOf((*MockAzureClient)(nil).ListVirtualMachineScaleSetsFromResourceGroup), arg0, arg1)
}

// ListVirtualMachineScaleSetsOwnedVms mocks base method.
func (m *MockAzureClient) ListVirtualMachineScaleSetsOwnedVms(arg0 context.Context, arg1, arg2 string) ([]*armcompute.VirtualMachineScaleSetVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineScaleSetsOwnedVms", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*armcompute.VirtualMachineScaleSetVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineScaleSetsOwnedVms indicates an expected call of ListVirtualMachineScaleSetsOwnedVms.
func (mr *MockAzureClientMockRecorder) ListVirtualMachineScaleSetsOwnedVms(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineScaleSetsOwnedVms", reflect.TypeOf((*MockAzureClient)(nil).ListVirtualMachineScaleSetsOwnedVms), arg0, arg1, arg2)
}
