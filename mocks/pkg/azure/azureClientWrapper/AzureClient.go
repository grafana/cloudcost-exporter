// Code generated by mockery v2.43.2. DO NOT EDIT.

package azureClientWrapper

import (
	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	armcontainerservice "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v5"

	context "context"

	mock "github.com/stretchr/testify/mock"

	sdk "gomodules.xyz/azure-retail-prices-sdk-for-go/sdk"
)

// AzureClient is an autogenerated mock type for the AzureClient type
type AzureClient struct {
	mock.Mock
}

type AzureClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AzureClient) EXPECT() *AzureClient_Expecter {
	return &AzureClient_Expecter{mock: &_m.Mock}
}

// ListClustersInSubscription provides a mock function with given fields: _a0
func (_m *AzureClient) ListClustersInSubscription(_a0 context.Context) ([]*armcontainerservice.ManagedCluster, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersInSubscription")
	}

	var r0 []*armcontainerservice.ManagedCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*armcontainerservice.ManagedCluster, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*armcontainerservice.ManagedCluster); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcontainerservice.ManagedCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureClient_ListClustersInSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClustersInSubscription'
type AzureClient_ListClustersInSubscription_Call struct {
	*mock.Call
}

// ListClustersInSubscription is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *AzureClient_Expecter) ListClustersInSubscription(_a0 interface{}) *AzureClient_ListClustersInSubscription_Call {
	return &AzureClient_ListClustersInSubscription_Call{Call: _e.mock.On("ListClustersInSubscription", _a0)}
}

func (_c *AzureClient_ListClustersInSubscription_Call) Run(run func(_a0 context.Context)) *AzureClient_ListClustersInSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AzureClient_ListClustersInSubscription_Call) Return(_a0 []*armcontainerservice.ManagedCluster, _a1 error) *AzureClient_ListClustersInSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureClient_ListClustersInSubscription_Call) RunAndReturn(run func(context.Context) ([]*armcontainerservice.ManagedCluster, error)) *AzureClient_ListClustersInSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ListMachineTypesByLocation provides a mock function with given fields: _a0, _a1
func (_m *AzureClient) ListMachineTypesByLocation(_a0 context.Context, _a1 string) ([]*armcompute.VirtualMachineSize, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListMachineTypesByLocation")
	}

	var r0 []*armcompute.VirtualMachineSize
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*armcompute.VirtualMachineSize, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*armcompute.VirtualMachineSize); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.VirtualMachineSize)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureClient_ListMachineTypesByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMachineTypesByLocation'
type AzureClient_ListMachineTypesByLocation_Call struct {
	*mock.Call
}

// ListMachineTypesByLocation is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AzureClient_Expecter) ListMachineTypesByLocation(_a0 interface{}, _a1 interface{}) *AzureClient_ListMachineTypesByLocation_Call {
	return &AzureClient_ListMachineTypesByLocation_Call{Call: _e.mock.On("ListMachineTypesByLocation", _a0, _a1)}
}

func (_c *AzureClient_ListMachineTypesByLocation_Call) Run(run func(_a0 context.Context, _a1 string)) *AzureClient_ListMachineTypesByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AzureClient_ListMachineTypesByLocation_Call) Return(_a0 []*armcompute.VirtualMachineSize, _a1 error) *AzureClient_ListMachineTypesByLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureClient_ListMachineTypesByLocation_Call) RunAndReturn(run func(context.Context, string) ([]*armcompute.VirtualMachineSize, error)) *AzureClient_ListMachineTypesByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrices provides a mock function with given fields: _a0, _a1
func (_m *AzureClient) ListPrices(_a0 context.Context, _a1 *sdk.RetailPricesClientListOptions) ([]*sdk.ResourceSKU, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListPrices")
	}

	var r0 []*sdk.ResourceSKU
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.RetailPricesClientListOptions) ([]*sdk.ResourceSKU, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.RetailPricesClientListOptions) []*sdk.ResourceSKU); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sdk.ResourceSKU)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sdk.RetailPricesClientListOptions) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureClient_ListPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrices'
type AzureClient_ListPrices_Call struct {
	*mock.Call
}

// ListPrices is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *sdk.RetailPricesClientListOptions
func (_e *AzureClient_Expecter) ListPrices(_a0 interface{}, _a1 interface{}) *AzureClient_ListPrices_Call {
	return &AzureClient_ListPrices_Call{Call: _e.mock.On("ListPrices", _a0, _a1)}
}

func (_c *AzureClient_ListPrices_Call) Run(run func(_a0 context.Context, _a1 *sdk.RetailPricesClientListOptions)) *AzureClient_ListPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdk.RetailPricesClientListOptions))
	})
	return _c
}

func (_c *AzureClient_ListPrices_Call) Return(_a0 []*sdk.ResourceSKU, _a1 error) *AzureClient_ListPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureClient_ListPrices_Call) RunAndReturn(run func(context.Context, *sdk.RetailPricesClientListOptions) ([]*sdk.ResourceSKU, error)) *AzureClient_ListPrices_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMachineScaleSetsFromResourceGroup provides a mock function with given fields: _a0, _a1
func (_m *AzureClient) ListVirtualMachineScaleSetsFromResourceGroup(_a0 context.Context, _a1 string) ([]*armcompute.VirtualMachineScaleSet, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualMachineScaleSetsFromResourceGroup")
	}

	var r0 []*armcompute.VirtualMachineScaleSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*armcompute.VirtualMachineScaleSet, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*armcompute.VirtualMachineScaleSet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.VirtualMachineScaleSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMachineScaleSetsFromResourceGroup'
type AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call struct {
	*mock.Call
}

// ListVirtualMachineScaleSetsFromResourceGroup is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *AzureClient_Expecter) ListVirtualMachineScaleSetsFromResourceGroup(_a0 interface{}, _a1 interface{}) *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call {
	return &AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call{Call: _e.mock.On("ListVirtualMachineScaleSetsFromResourceGroup", _a0, _a1)}
}

func (_c *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call) Run(run func(_a0 context.Context, _a1 string)) *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call) Return(_a0 []*armcompute.VirtualMachineScaleSet, _a1 error) *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call) RunAndReturn(run func(context.Context, string) ([]*armcompute.VirtualMachineScaleSet, error)) *AzureClient_ListVirtualMachineScaleSetsFromResourceGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMachineScaleSetsVm provides a mock function with given fields: _a0, _a1, _a2
func (_m *AzureClient) ListVirtualMachineScaleSetsVm(_a0 context.Context, _a1 string, _a2 string) ([]*armcompute.VirtualMachineScaleSetVM, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualMachineScaleSetsVm")
	}

	var r0 []*armcompute.VirtualMachineScaleSetVM
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*armcompute.VirtualMachineScaleSetVM, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*armcompute.VirtualMachineScaleSetVM); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.VirtualMachineScaleSetVM)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AzureClient_ListVirtualMachineScaleSetsVm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMachineScaleSetsVm'
type AzureClient_ListVirtualMachineScaleSetsVm_Call struct {
	*mock.Call
}

// ListVirtualMachineScaleSetsVm is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *AzureClient_Expecter) ListVirtualMachineScaleSetsVm(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AzureClient_ListVirtualMachineScaleSetsVm_Call {
	return &AzureClient_ListVirtualMachineScaleSetsVm_Call{Call: _e.mock.On("ListVirtualMachineScaleSetsVm", _a0, _a1, _a2)}
}

func (_c *AzureClient_ListVirtualMachineScaleSetsVm_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *AzureClient_ListVirtualMachineScaleSetsVm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AzureClient_ListVirtualMachineScaleSetsVm_Call) Return(_a0 []*armcompute.VirtualMachineScaleSetVM, _a1 error) *AzureClient_ListVirtualMachineScaleSetsVm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AzureClient_ListVirtualMachineScaleSetsVm_Call) RunAndReturn(run func(context.Context, string, string) ([]*armcompute.VirtualMachineScaleSetVM, error)) *AzureClient_ListVirtualMachineScaleSetsVm_Call {
	_c.Call.Return(run)
	return _c
}

// NewAzureClient creates a new instance of AzureClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAzureClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AzureClient {
	mock := &AzureClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
